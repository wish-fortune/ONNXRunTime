parameters:
- name: enable_linux_cpu
  displayName: 'Whether Linux CPU package is built.'
  type: boolean
  default: true

- name: enable_linux_gpu
  displayName: 'Whether Linux GPU package is built.'
  type: boolean
  default: true

- name: enable_windows_cpu
  displayName: 'Whether Windows CPU package is built.'
  type: boolean
  default: true

- name: enable_windows_gpu
  displayName: 'Whether Windows GPU package is built.'
  type: boolean
  default: true

- name: enable_mac_cpu
  displayName: 'Whether Mac CPU package is built.'
  type: boolean
  default: true

- name: enable_linux_arm
  displayName: 'Whether Linux ARM package is built.'
  type: boolean
  default: true

- name: enable_windows_arm64_qnn
  displayName: 'Whether Windows ARM64 package with QNN EP is built.'
  type: boolean
  default: true

- name: enable_windows_x64_qnn
  displayName: 'Whether Windows x86_64 package with QNN EP is built.'
  type: boolean
  default: true

- name: build_py_parameters
  displayName: 'Specify extra build parameters'
  type: string
  default: '--use_azure'

# TODO: Now the Windows jobs use a different cmake build type. Consider to merge it.
- name: cmake_build_type
  type: string
  displayName: 'Linux packages cmake build type. Linux Only.'
  default: 'Release'
  values:
   - Debug
   - Release
   - RelWithDebInfo
   - MinSizeRel

# Only applies to QNN packages.
- name: qnn_sdk_version
  type: string
  displayName: 'QNN SDK version. Only for QNN packages.'
  default: 2.24.0.240626

trigger: none

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
    
extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    # Update the pool with your team's 1ES hosted pool.
    pool:
      name: 'onnxruntime-Win-CPU-2022'  # Name of your hosted pool
      os: windows  # OS of the image. This value cannot be a variable. Allowed values: windows, linux, macOS

    stages:
    - stage: Stage
      jobs:
      - job: Windows_CPU
        variables:
          OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
          EnvSetupScript: setup_env.bat
        pool:
          name: 'onnxruntime-Win-CPU-2022'
          os: windows
        strategy:
          matrix:
            Python38_x64:
              PythonVersion: '3.8'
              MsbuildPlatform: x64
              buildArch: x64
            Python39_x64:
              PythonVersion: '3.9'
              MsbuildPlatform: x64
              buildArch: x64
            Python310_x64:
              PythonVersion: '3.10'
              MsbuildPlatform: x64
              buildArch: x64
            Python311_x64:
              PythonVersion: '3.11'
              MsbuildPlatform: x64
              buildArch: x64
            Python312_x64:
              PythonVersion: '3.12'
              MsbuildPlatform: x64
              buildArch: x64
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)
            artifactName: win_cpu_wheel
        # Define the steps that the pipeline will run.
        # In most cases, copy and paste the steps from the original pipeline.
        timeoutInMinutes: 180
        workspace:
          clean: all

        steps:
        - checkout: self
          clean: true
          submodules: recursive

        - template: telemetry-steps.yml

        - task: UsePythonVersion@0
          inputs:
            versionSpec: $(PythonVersion)
            addToPath: true
            architecture: $(buildArch)

        - template: set-nightly-build-option-variable-step.yml

        - task: BatchScript@1
          displayName: 'setup env'
          inputs:
            filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
            modifyEnvironment: true
            workingFolder: '$(Build.BinariesDirectory)'

        - template: templates/download-deps.yml

        - task: PythonScript@0
          displayName: 'Update deps.txt'
          inputs:
            scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
            arguments: --new_dir $(Build.BinariesDirectory)/deps
            workingDirectory: $(Build.BinariesDirectory)

        - task: PowerShell@2
          displayName: 'Install ONNX'
          inputs:
            filePath: '$(Build.SourcesDirectory)/tools/ci_build/github/windows/install_third_party_deps.ps1'
            workingDirectory: '$(Build.BinariesDirectory)'
            arguments: -cpu_arch $(buildArch) -install_prefix $(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\installed -build_config ${{ parameters.cmake_build_type }}

        - task: PythonScript@0
          displayName: 'Generate cmake config'
          inputs:
            scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
            arguments: >
              --config ${{ parameters.cmake_build_type }}
              --enable_lto
              --build_dir $(Build.BinariesDirectory)
              --skip_submodule_sync
              --cmake_generator "Visual Studio 17 2022"
              --enable_pybind
              --enable_onnx_tests
              ${{ parameters.build_py_parameters }}
              --parallel --use_binskim_compliant_compile_flags --update
              $(TelemetryOption)
            workingDirectory: '$(Build.BinariesDirectory)'

        - task: VSBuild@1
          displayName: 'Build'
          inputs:
            solution: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\onnxruntime.sln'
            platform: $(MsbuildPlatform)
            configuration: ${{ parameters.cmake_build_type }}
            msbuildArchitecture: $(buildArch)
            maximumCpuCount: true
            logProjectEvents: true
            workingFolder: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}'
            createLogFile: true

        # Esrp signing
        - template: win-esrp-dll.yml
          parameters:
            FolderPath: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime\capi'
            DisplayName: 'ESRP - Sign Native dlls'
            DoEsrp: true
            Pattern: '*.pyd,*.dll'

        - task: PythonScript@0
          displayName: 'Build wheel'
          inputs:
            scriptPath: '$(Build.SourcesDirectory)\setup.py'
            arguments: 'bdist_wheel ${{ parameters.build_py_parameters }} $(NightlyBuildOption)'
            workingDirectory: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}'

        - task: CopyFiles@2
          displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
          inputs:
            SourceFolder: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\dist'
            Contents: '*.whl'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: ONNXRuntime python wheel'
          inputs:
            ArtifactName: onnxruntime

        - script: |
            7z x *.whl
          workingDirectory: '$(Build.ArtifactStagingDirectory)'
          displayName: 'unzip the package'

        - task: CredScan@3
          displayName: 'Run CredScan'
          inputs:
            debugMode: false
          continueOnError: true

        - task: BinSkim@4
          displayName: 'Run BinSkim'
          inputs:
            AnalyzeTargetGlob: '+:file|$(Build.ArtifactStagingDirectory)\**\*.dll;-:file|$(Build.ArtifactStagingDirectory)\**\DirectML.dll'
          continueOnError: true

        - powershell: |
           python -m pip uninstall -y ort-nightly-gpu ort-nightly onnxruntime onnxruntime-gpu -qq
           Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname tabulate}
           Remove-Item -Recurse -Force onnxruntime
           if ("$(ExtraParam)" -contains "--use_azure") {
             $env:path="$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\_deps\vcpkg-src\installed\x64-windows\bin;$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\_deps\vcpkg-src\installed\x86-windows\bin;$env:path"
             python onnxruntime_test_python_azure.py
           }
           python onnx_backend_test_series.py
          workingDirectory: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}'
          displayName: 'Run Python Tests'
        - ${{ if eq(parameters.publish_symbols, true) }}:
          - task: PublishSymbols@2
            displayName: 'Publish symbols'
            condition: and (succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/rel-')))
            inputs:
              SymbolsFolder: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}'
              SearchPattern: |
               onnxruntime_pybind11_state.pdb
               onnxruntime_providers_shared.pdb
              IndexSources: true
              SymbolServerType: TeamServices
              SymbolExpirationInDays: 3650
              SymbolsArtifactName: 'win_cpu_$(PythonVersion)_$(buildArch)_$(Build.BuildNumber)'
 
 

        - template: component-governance-component-detection-steps.yml
          parameters:
            condition: 'succeeded'

        - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
          displayName: 'Clean Agent Directories'
          condition: always()
